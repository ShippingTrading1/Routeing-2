{
  "openapi": "3.0.1",
  "info": {
    "version": "1.1.0",
    "title": "Dataloy Distances API",
    "description": "\nThe [Dataloy Distances API](https://dataloy-systems.com/distances-api/) provides routes, distances and details about ECA for any sea route globally. In order to use the route endpoint and get a route and distance, you will need to input at least two locations with latitude and longitude in decimal format. You can use your own locations or query for over 10,000 ports and maritime locations using our Port endpoint. Please see endpoint documentation in order to see the details of each endpoint.\n\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "termsOfService": "https://dataloy-systems.com/distances-api-terms-of-service/",
    "contact": {
      "name": "Dataloy Support",
      "email": "support@dataloy.com",
      "url": "http://support.dataloy.com"
    },
    "license": {
      "name": ""
    },
    "x-logo": {
      "url": "https://dataloy-systems.com/wp-content/uploads/2019/08/dataloy_logo_default_300-3-1.jpg",
      "altText": "Dataloy Systems"
    }
  },
  "servers": [
    {
      "url": "https://distances.dataloy.com"
    }
  ],
  "paths": {
    "/route": {
      "get": {
        "tags": [
          "Routing API"
        ],
        "summary": "GET Route Endpoint",
        "description": "Use the GET request with the minimum number of parameters to get any route worldwide.",
        "parameters": [
          {
            "name": "point",
            "in": "query",
            "description": "The points for which the route should be calculated. Format: `[latitude,longitude]`. Specify at least an origin and a destination. Via points are possible.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": "33.75166,-118.270864"
            },
            "examples": {
              "default": {
                "value": "33.75166,-118.270864"
              }
            }
          },
          {
            "name": "block_sc",
            "in": "query",
            "description": "By default, routes will go via the Suez Canal if this is the shortest option. To block the Suez Canal and force routing around it, set this parameter to `true`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": "false"
            },
            "examples": {
              "default": {
                "value": "false"
              }
            }
          },
          {
            "name": "block_pc",
            "in": "query",
            "description": "By default, routes will go via the Panama Canal if this is the shortest option. To block the Panama Canal and force routing around it, set this parameter to `true`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": "true"
            },
            "examples": {
              "default": {
                "value": "true"
              }
            }
          },
          {
            "name": "block_kc",
            "in": "query",
            "description": "By default, routes will go via the Kiel Canal if this is the shortest option. To block the Kiel Canal and force routing around it, set this parameter to `true`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": "false"
            },
            "examples": {
              "default": {
                "value": "false"
              }
            }
          },
          {
            "name": "block_nw",
            "in": "query",
            "description": "By default, routes will go via the North West Passage if this is the shortest option. To block the North West Passage and force routing around it, set this parameter to `true`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": "true"
            },
            "examples": {
              "default": {
                "value": "true"
              }
            }
          },
          {
            "name": "block_ne",
            "in": "query",
            "description": "By default, routes will go via the North East Passage if this is the shortest option. To block the North East Passage and force routing around it, set this parameter to `true`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": "true"
            },
            "examples": {
              "default": {
                "value": "true"
              }
            }
          },
          {
            "name": "block_cc",
            "in": "query",
            "description": "By default, routes will go via the Corinth Canal if this is the shortest option. To block the Corinth Canal and force routing around it, set this parameter to `true`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": "false"
            },
            "examples": {
              "default": {
                "value": "false"
              }
            }
          },
          {
            "name": "block_ts",
            "in": "query",
            "description": "By default, routes will go via the Torres Strait if this is the shortest option. To block the Torres Strait and force routing around it, set this parameter to `true`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": "false"
            },
            "examples": {
              "default": {
                "value": "false"
              }
            }
          },
          {
            "name": "block_area",
            "in": "query",
            "description": "Gives you the possibilty to block specific areas. You can add several areas in the block_area parameter seperating the areas by a semicolon (;). Radius is given in meters. The format of one block area is: `[longitude,latitude,radius]`. The format of several block areas is: `[longitude,latitude,radius;longitude,latitude,radius]`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": "55.52863,9.72839,1000;55.565922,10.8654,50000"
            },
            "examples": {
              "default": {
                "value": "55.52863,9.72839,1000;55.565922,10.8654,50000"
              }
            }
          },
          {
            "name": "avoid_eca_factor",
            "in": "query",
            "description": "By default, routes pass the shortes way through any ECA zones. To avoid ECA, a factor between 1-5 can be entered, where 1 is no avoidance and 5 is maximum avoidance. Recommended value for achieving a good avoidance is as low as `1.3`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "default": 1,
              "example": "1.3"
            },
            "examples": {
              "default": {
                "value": "1.3"
              }
            }
          },
          {
            "name": "avoid_hra_factor",
            "in": "query",
            "description": "By default, routes pass the shortes way through any HRA zones. To avoid HRA, a factor between 1-5 can be entered, where 1 is no avoidance and 5 is maximum avoidance. Recommended value for achieving a good avoidance is `2`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "default": 1,
              "example": "2"
            },
            "examples": {
              "default": {
                "value": "2"
              }
            }
          },
          {
            "name": "avoid_ice_factor",
            "in": "query",
            "description": "By default, routes pass the shortes way through any ice areas. To avoid ice, a factor between 1-5 can be entered, where 1 is no avoidance and 5 is maximum avoidance. Recommended value is `5`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "default": 1,
              "example": "5"
            },
            "examples": {
              "default": {
                "value": "5"
              }
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Routing Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth:": []
          }
        ],
        "servers": [
          {
            "url": "https://distances.dataloy.com/route"
          }
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl --location --request GET 'https://distances.dataloy.com/route/route?point=60.181136,4.979553&point=21.640835,113.656311&avoid_eca_factor=1&avoid_hra_factor=1&avoid_ice_factor=1'\n --header 'X-API-Key: YOUR KEY HERE'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n       .build();\n      Request request = new Request.Builder()\n       .url(\"https://distances.dataloy.com/route/route?point=60.181136,4.979553&point=21.640835,113.656311&avoid_eca_factor=1&avoid_hra_factor=1&avoid_ice_factor=1\")\n       .method(\"GET\"\n, null)\n    .addHeader(\"X-API-Key\", \"YOUR KEY HERE\")   .build();\n      Response response = client.newCall(request).execute();"
          },
          {
            "lang": "Python",
            "source": "import http.client\nconn = http.client.HTTPSConnection(\"distances.dataloy.com\")\npayload = ''\nheaders = {\n   'X-API-Key': 'YOUR KEY HERE'\n}\nconn.request(\"GET\", \"/route/route?point=60.181136,4.979553&point=21.640835,113.656311&avoid_eca_factor=1&avoid_hra_factor=1&avoid_ice_factor=1\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\n print(data.decode(\"utf-8\"))"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers();\nmyHeaders.append(\"X-API-Key\", \"YOUR KEY HERE\");\nvar requestOptions = {\n   method: 'GET',\n   headers: myHeaders,\n   redirect: 'follow'\n};\nfetch(\"https://distances.dataloy.com/route/route?point=60.181136,4.979553&point=21.640835,113.656311&avoid_eca_factor=1&avoid_hra_factor=1&avoid_ice_factor=1\", requestOptions)\n   .then(response => response.text())\n   .then(result => console.log(result))\n   .catch(error => console.log('error', error));"
          }
        ]
      }
    },
    "/port": {
      "get": {
        "tags": [
          "Ports API"
        ],
        "summary": "GET Port Endpoint",
        "description": "Use the GET request with the minimum number of parameters to get any port with details.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "The filter that provides the desired port in return.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "portName(EQ)BERGEN, locationCode(EQ)BGO, portId(EQ)10010"
            },
            "examples": {
              "default": {
                "value": "portName(EQ)BERGEN, locationCode(EQ)BGO, portId(EQ)10010"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Port Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth:": []
          }
        ],
        "servers": [
          {
            "url": "https://distances.dataloy.com/port"
          }
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl --location --request GET 'https://distances.dataloy.com/port/port?filter=portName(EQ)BERGEN'\n --header 'X-API-Key: YOUR KEY HERE'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n       .build();\n      Request request = new Request.Builder()\n       .url(\"https://distances.dataloy.com/port/port?filter=portName(EQ)BERGEN\")\n       .method(\"GET\"\n, null)\n   .addHeader(\"X-API-Key\", \"YOUR KEY HERE\")    .build();\n      Response response = client.newCall(request).execute();"
          },
          {
            "lang": "Phyton",
            "source": "import http.client\nconn = http.client.HTTPSConnection(\"distances.dataloy.com\")\npayload = ''\nheaders = {\n   'X-API-Key': 'YOUR KEY HERE'\n}\nconn.request(\"GET\", \"/port/port?filter=portName(EQ)BERGEN\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\n print(data.decode(\"utf-8\"))"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers();\nmyHeaders.append(\"X-API-Key\", \"YOUR KEY HERE\");\nvar requestOptions = {\n   method: 'GET',\n   headers: myHeaders,\n   redirect: 'follow'\n};\nfetch(\"https://distances.dataloy.com/port/port?filter=portName(EQ)BERGEN\", requestOptions)\n   .then(response => response.text())\n   .then(result => console.log(result))\n   .catch(error => console.log('error', error));"
          }
        ]
      }
    },
    "/request": {
      "get": {
        "tags": [
          "Request API"
        ],
        "summary": "GET Request Endpoint",
        "description": "Use the GET method to get the amount of calls that have been made. The api as two available parameters 'start' and 'end'. These can be used alone, or togheter. When no parameter is present, the user will get the amout of calls made between the first of the current month and the current date. When start is used, the user will get amount for calls made between the specified date, and the current date, and when end is specified the user will get the amount of calls made from the first day of the month that the user specify as end date",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "The date that the user want to track calls from in the syntax yyyy-MM-dd",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2023-07-01"
            },
            "examples": {
              "default": {
                "value": "2023-07-01"
              }
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The date that the user want to track to, in the same syntax : yyyy-MM-dd.Then end date cannot be before start date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2023-07-15"
            },
            "examples": {
              "default": {
                "value": "2023-07-15"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth:": []
          }
        ],
        "servers": [
          {
            "url": "https://distances.dataloy.com/request/request"
          }
        ],
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl --location --request GET 'https://distances.dataloy.com/request/request?start=2023-08-03&end=2023-08-15'\n --header 'X-API-Key: YOUR KEY HERE'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n       .build();\n      Request request = new Request.Builder()\n       .url(\"https://distances.dataloy.com/request/request?start=2023-08-03&end=2023-08-15\")\n       .method(\"GET\"\n, null)\n   .addHeader(\"X-API-Key\", \"YOUR KEY HERE\")    .build();\n      Response response = client.newCall(request).execute();"
          },
          {
            "lang": "Phyton",
            "source": "import http.client\nconn = http.client.HTTPSConnection(\"distances.dataloy.com\")\npayload = ''\nheaders = {\n   'X-API-Key': 'YOUR KEY HERE'\n}\nconn.request(\"GET\", \"/request/request?start=2023-08-03&end=2023-08-15\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\n print(data.decode(\"utf-8\"))"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers();\nmyHeaders.append(\"X-API-Key\", \"YOUR KEY HERE\");\nvar requestOptions = {\n   method: 'GET',\n   headers: myHeaders,\n   redirect: 'follow'\n};\nfetch(\"https://distances.dataloy.com/request/request?start=2023-08-03&end=2023-08-15\", requestOptions)\n   .then(response => response.text())\n   .then(result => console.log(result))\n   .catch(error => console.log('error', error));"
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Routing API",
      "description": "\n### Introduction\n\nThe Routing API is part of the Dataloy Distances API. Routing is the process of finding the best path connecting\ntwo or more points, where the meaning of ''best'' depends on the use case, however normally it means the route having the shortest distance."
    },
    {
      "name": "Ports API",
      "description": "\n### Introduction\n\nThe Ports API is part of the Dataloy Distances API. The Routing API requires a set of latitude and longitude coordinates. To make it easy to retrieve the coordinates of ports, the Ports API offers an endpoint to get basic port information such as Port Name, Location Code, Latitude, Longitude and Timezone."
    },
    {
      "name": "Request API",
      "description": "\n### Introduction\n\nThe Request API is part of the Dataloy Distances API. The Request API takes an start date, and an end date, as well as the api key. This will provide the amount of calls the user have made to all of the other plans they have in the distances API."
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth:": {
        "type": "apiKey",
        "name": "X-API-Key",
        "in": "header"
      }
    },
    "schemas": {
      "RouteResponse": {
        "type": "object",
        "properties": {
          "info": {
            "type": "object",
            "properties": {
              "copyrights": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  }
                ]
              },
              "took": {
                "type": "integer"
              }
            }
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "distance": {
                  "type": "number",
                  "format": "double"
                },
                "bbox": {
                  "type": "array",
                  "description": "The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.\n",
                  "items": {
                    "type": "number",
                    "format": "double"
                  }
                },
                "points": {
                  "allOf": [
                    {
                      "description": "The geometry of the route.\n"
                    },
                    {
                      "$ref": "#/components/schemas/LineString"
                    }
                  ]
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "eca_distance": {
                      "type": "array",
                      "description": "Details about how the route intersects and runs inside relevant ECA zones. Consider the value `{\"eca_distance\": [[0,49,{\"in_eca\": true,\"name\": \"North Sea and Baltic\",\"distance\": 477.67,\"from\": [10.713426,59.906092],\"to\": [4.1038,62]}]}`.\nIn this example, the route runs inside the ECA zone North Sea and Baltic, \nbetween `points[0]` and `points[49]`.\n",
                      "items": [
                        {
                          "type": "array",
                          "items": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "in_eca": {
                                  "type": "boolean"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "distance": {
                                  "type": "number",
                                  "format": "double"
                                },
                                "from": {
                                  "type": "array",
                                  "items": [
                                    {
                                      "type": "number",
                                      "format": "double"
                                    },
                                    {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  ]
                                },
                                "to": {
                                  "type": "array",
                                  "items": [
                                    {
                                      "type": "number",
                                      "format": "double"
                                    },
                                    {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "hra_distance": {
                      "type": "array",
                      "description": "Details about how the route intersects and runs inside relevant HRA (high risk area) zones. Consider the value `{\"hra_distance\": [[214,243,{\"in_hra\": true,\"distance\": 966.50,\"from\": [43.189582,13.344682],\"to\": [58.438634,15.679702]}]}`.\nIn this example, the route runs inside HRA zones \nbetween `points[214]` and `points[243]`.\n",
                      "items": [
                        {
                          "type": "array",
                          "items": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "in_hra": {
                                  "type": "boolean"
                                },
                                "distance": {
                                  "type": "number",
                                  "format": "double"
                                },
                                "from": {
                                  "type": "array",
                                  "items": [
                                    {
                                      "type": "number",
                                      "format": "double"
                                    },
                                    {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  ]
                                },
                                "to": {
                                  "type": "array",
                                  "items": [
                                    {
                                      "type": "number",
                                      "format": "double"
                                    },
                                    {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "name": {
                      "type": "array",
                      "description": "Details about names of canals, rivers etc. Consider the value `{\"street_name\": [[97,180,\"Suez Canal\"]]}`.\nIn this example, the route runs through the Suez Canal \nbetween `points[97]` and `points[180]`.\n",
                      "items": [
                        {
                          "type": "array",
                          "items": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        }
                      ]
                    },
                    "snapped_points": {
                      "allOf": [
                        {
                          "description": "The snapped input points.\n"
                        },
                        {
                          "$ref": "#/components/schemas/LineString"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "info": {
            "copyrights": [
              "Viku AS"
            ],
            "took": 1295
          },
          "paths": [
            {
              "distance": 10999.962262419007,
              "bbox": [
                -10.79205,
                1.124421,
                114.847317,
                62
              ],
              "points": {
                "coordinates": [
                  [
                    10.713426,
                    59.906092
                  ],
                  [
                    10.715394,
                    59.902152
                  ],
                  [
                    10.687522,
                    59.892303
                  ],
                  [
                    10.649515,
                    59.879908
                  ],
                  [
                    10.617208,
                    59.852878
                  ],
                  [
                    10.597267,
                    59.835589
                  ],
                  [
                    10.577934,
                    59.81882
                  ],
                  [
                    10.564327,
                    59.782239
                  ],
                  [
                    10.571943,
                    59.765879
                  ],
                  [
                    10.574089,
                    59.752673
                  ],
                  [
                    10.578022,
                    59.736159
                  ],
                  [
                    10.580763,
                    59.727268
                  ],
                  [
                    10.582193,
                    59.718495
                  ],
                  [
                    10.587778,
                    59.708912
                  ],
                  [
                    10.594404,
                    59.704456
                  ],
                  [
                    10.604539,
                    59.689114
                  ],
                  [
                    10.616575,
                    59.673125
                  ],
                  [
                    10.617878,
                    59.664987
                  ],
                  [
                    10.618543,
                    59.660829
                  ],
                  [
                    10.619489,
                    59.654921
                  ],
                  [
                    10.623543,
                    59.629597
                  ],
                  [
                    10.631145,
                    59.586012
                  ],
                  [
                    10.630511,
                    59.571899
                  ],
                  [
                    10.610874,
                    59.533379
                  ],
                  [
                    10.560831,
                    59.458298
                  ],
                  [
                    10.558297,
                    59.423193
                  ],
                  [
                    10.573296,
                    59.379591
                  ],
                  [
                    10.577934,
                    59.366109
                  ],
                  [
                    10.625107,
                    59.262589
                  ],
                  [
                    10.647385,
                    59.192784
                  ],
                  [
                    10.647385,
                    59.192784
                  ],
                  [
                    10.637662,
                    58.970773
                  ],
                  [
                    10,
                    58.696181
                  ],
                  [
                    10.003291,
                    58.696709
                  ],
                  [
                    9.438857,
                    58.359819
                  ],
                  [
                    8.874422,
                    58.022929
                  ],
                  [
                    8.363603,
                    57.886922
                  ],
                  [
                    8.363603,
                    57.886922
                  ],
                  [
                    7.226284,
                    57.918053
                  ],
                  [
                    6.926662,
                    57.989522
                  ],
                  [
                    6.519093,
                    58.079558
                  ],
                  [
                    5.856369,
                    58.376585
                  ],
                  [
                    5.626529,
                    58.518006
                  ],
                  [
                    5.143636,
                    58.892662
                  ],
                  [
                    4.101378,
                    59.8998
                  ],
                  [
                    4.101895,
                    60.34855
                  ],
                  [
                    4.102413,
                    60.7973
                  ],
                  [
                    4.10293,
                    61.24605
                  ],
                  [
                    4.103448,
                    61.6948
                  ],
                  [
                    4.1038,
                    62
                  ],
                  [
                    -4,
                    62
                  ],
                  [
                    -10.350574,
                    54.350574
                  ],
                  [
                    -10.79205,
                    51.797648
                  ],
                  [
                    -10.023932,
                    43.260722
                  ],
                  [
                    -10.026282,
                    42.88182
                  ],
                  [
                    -10.026186,
                    42.46553
                  ],
                  [
                    -10.026082,
                    42.015288
                  ],
                  [
                    -10.025979,
                    41.565047
                  ],
                  [
                    -10.025875,
                    41.114806
                  ],
                  [
                    -10.025771,
                    40.664564
                  ],
                  [
                    -10.025667,
                    40.214323
                  ],
                  [
                    -10.025564,
                    39.764081
                  ],
                  [
                    -10.02546,
                    39.31384
                  ],
                  [
                    -10.025356,
                    38.863598
                  ],
                  [
                    -10.025356,
                    38.69584
                  ],
                  [
                    -9.998078,
                    38.603524
                  ],
                  [
                    -9.908628,
                    38.296362
                  ],
                  [
                    -9.78081,
                    37.857447
                  ],
                  [
                    -9.652993,
                    37.418532
                  ],
                  [
                    -8.509321,
                    36.452241
                  ],
                  [
                    -7.973851,
                    36.329996
                  ],
                  [
                    -7.438382,
                    36.20775
                  ],
                  [
                    -6.902912,
                    36.085504
                  ],
                  [
                    -6.367442,
                    35.963259
                  ],
                  [
                    -6.200541,
                    35.925156
                  ],
                  [
                    -6.100124,
                    35.925653
                  ],
                  [
                    -5.749613,
                    35.937037
                  ],
                  [
                    -5.608748,
                    35.93671
                  ],
                  [
                    -5.551674,
                    35.951129
                  ],
                  [
                    -5.508509,
                    35.962488
                  ],
                  [
                    -5.469502,
                    35.972753
                  ],
                  [
                    -5.427,
                    35.983562
                  ],
                  [
                    -5.072639,
                    36.028626
                  ],
                  [
                    -4.523336,
                    36.098481
                  ],
                  [
                    -3.974033,
                    36.168336
                  ],
                  [
                    -3.42473,
                    36.238191
                  ],
                  [
                    -2.875427,
                    36.308045
                  ],
                  [
                    -2.326124,
                    36.3779
                  ],
                  [
                    -2.268051,
                    36.385285
                  ],
                  [
                    -2.188115,
                    36.395701
                  ],
                  [
                    3.06011,
                    37.06011
                  ],
                  [
                    6.546112,
                    37.329032
                  ],
                  [
                    10.409177,
                    37.409177
                  ],
                  [
                    32.220277,
                    31.534171
                  ],
                  [
                    32.351432,
                    31.366935
                  ],
                  [
                    32.367263,
                    31.321183
                  ],
                  [
                    32.326332,
                    31.275712
                  ],
                  [
                    32.31593,
                    31.263163
                  ],
                  [
                    32.306732,
                    31.25052
                  ],
                  [
                    32.305175,
                    31.245859
                  ],
                  [
                    32.304701,
                    31.240173
                  ],
                  [
                    32.304078,
                    31.22865
                  ],
                  [
                    32.30432,
                    31.220009
                  ],
                  [
                    32.305401,
                    31.193798
                  ],
                  [
                    32.30868,
                    31.101482
                  ],
                  [
                    32.30884,
                    31.096973
                  ],
                  [
                    32.313349,
                    30.959484
                  ],
                  [
                    32.315801,
                    30.881891
                  ],
                  [
                    32.316749,
                    30.832008
                  ],
                  [
                    32.317177,
                    30.818442
                  ],
                  [
                    32.317669,
                    30.81143
                  ],
                  [
                    32.319202,
                    30.805119
                  ],
                  [
                    32.326993,
                    30.777533
                  ],
                  [
                    32.335298,
                    30.748205
                  ],
                  [
                    32.338183,
                    30.736395
                  ],
                  [
                    32.340812,
                    30.72563
                  ],
                  [
                    32.342098,
                    30.720024
                  ],
                  [
                    32.343728,
                    30.712811
                  ],
                  [
                    32.344013,
                    30.705045
                  ],
                  [
                    32.342476,
                    30.69789
                  ],
                  [
                    32.339344,
                    30.684428
                  ],
                  [
                    32.33286,
                    30.65656
                  ],
                  [
                    32.326093,
                    30.627388
                  ],
                  [
                    32.324259,
                    30.620015
                  ],
                  [
                    32.322923,
                    30.616423
                  ],
                  [
                    32.315078,
                    30.602051
                  ],
                  [
                    32.311989,
                    30.596237
                  ],
                  [
                    32.309886,
                    30.591612
                  ],
                  [
                    32.308995,
                    30.589652
                  ],
                  [
                    32.304839,
                    30.580932
                  ],
                  [
                    32.303776,
                    30.570936
                  ],
                  [
                    32.303946,
                    30.565621
                  ],
                  [
                    32.305155,
                    30.560251
                  ],
                  [
                    32.309042,
                    30.549282
                  ],
                  [
                    32.312801,
                    30.544911
                  ],
                  [
                    32.320118,
                    30.535669
                  ],
                  [
                    32.328006,
                    30.526559
                  ],
                  [
                    32.33423,
                    30.518056
                  ],
                  [
                    32.336188,
                    30.513515
                  ],
                  [
                    32.336788,
                    30.512121
                  ],
                  [
                    32.33897,
                    30.506124
                  ],
                  [
                    32.343769,
                    30.484001
                  ],
                  [
                    32.345429,
                    30.476297
                  ],
                  [
                    32.349985,
                    30.452174
                  ],
                  [
                    32.357802,
                    30.435216
                  ],
                  [
                    32.362452,
                    30.41324
                  ],
                  [
                    32.365013,
                    30.401903
                  ],
                  [
                    32.371307,
                    30.364477
                  ],
                  [
                    32.372001,
                    30.362383
                  ],
                  [
                    32.372923,
                    30.360631
                  ],
                  [
                    32.37432,
                    30.358856
                  ],
                  [
                    32.413348,
                    30.314052
                  ],
                  [
                    32.442811,
                    30.282656
                  ],
                  [
                    32.4683,
                    30.273356
                  ],
                  [
                    32.487274,
                    30.267524
                  ],
                  [
                    32.506479,
                    30.261663
                  ],
                  [
                    32.528893,
                    30.253179
                  ],
                  [
                    32.538655,
                    30.242899
                  ],
                  [
                    32.55205,
                    30.223001
                  ],
                  [
                    32.565398,
                    30.200991
                  ],
                  [
                    32.567636,
                    30.193881
                  ],
                  [
                    32.568511,
                    30.186485
                  ],
                  [
                    32.568866,
                    30.174391
                  ],
                  [
                    32.569061,
                    30.165197
                  ],
                  [
                    32.569083,
                    30.164319
                  ],
                  [
                    32.571572,
                    30.065582
                  ],
                  [
                    32.573102,
                    30.053687
                  ],
                  [
                    32.583382,
                    29.999835
                  ],
                  [
                    32.585442,
                    29.991212
                  ],
                  [
                    32.586504,
                    29.984021
                  ],
                  [
                    32.587067,
                    29.978722
                  ],
                  [
                    32.587502,
                    29.972775
                  ],
                  [
                    32.586472,
                    29.964744
                  ],
                  [
                    32.58411,
                    29.957644
                  ],
                  [
                    32.580461,
                    29.950635
                  ],
                  [
                    32.57586,
                    29.943603
                  ],
                  [
                    32.571401,
                    29.939105
                  ],
                  [
                    32.567231,
                    29.935892
                  ],
                  [
                    32.56278,
                    29.931928
                  ],
                  [
                    32.559968,
                    29.92972
                  ],
                  [
                    32.553295,
                    29.924821
                  ],
                  [
                    32.550781,
                    29.920572
                  ],
                  [
                    32.546005,
                    29.90946
                  ],
                  [
                    32.546005,
                    29.903795
                  ],
                  [
                    32.554049,
                    29.852356
                  ],
                  [
                    32.553995,
                    29.847614
                  ],
                  [
                    32.534316,
                    29.773183
                  ],
                  [
                    32.54236,
                    29.63257
                  ],
                  [
                    32.544371,
                    29.61334
                  ],
                  [
                    32.548393,
                    29.592358
                  ],
                  [
                    32.599674,
                    29.480381
                  ],
                  [
                    32.614756,
                    29.454118
                  ],
                  [
                    32.630844,
                    29.417339
                  ],
                  [
                    32.740534,
                    29.181429
                  ],
                  [
                    32.820887,
                    29.008613
                  ],
                  [
                    32.940536,
                    28.751286
                  ],
                  [
                    33.033041,
                    28.592489
                  ],
                  [
                    33.181886,
                    28.374556
                  ],
                  [
                    33.31458,
                    28.18027
                  ],
                  [
                    33.340722,
                    28.15811
                  ],
                  [
                    33.36586,
                    28.137718
                  ],
                  [
                    33.60102,
                    27.943094
                  ],
                  [
                    33.655442,
                    27.898053
                  ],
                  [
                    33.674193,
                    27.88355
                  ],
                  [
                    33.703706,
                    27.860724
                  ],
                  [
                    33.761019,
                    27.809153
                  ],
                  [
                    33.815465,
                    27.752737
                  ],
                  [
                    33.818462,
                    27.749631
                  ],
                  [
                    33.837436,
                    27.72997
                  ],
                  [
                    34.074325,
                    27.532797
                  ],
                  [
                    34.102887,
                    27.509024
                  ],
                  [
                    40.184835,
                    18.710352
                  ],
                  [
                    42.430533,
                    14.964945
                  ],
                  [
                    42.75544,
                    14.336583
                  ],
                  [
                    43.189582,
                    13.344682
                  ],
                  [
                    43.189582,
                    13.344682
                  ],
                  [
                    43.19972,
                    13.234306
                  ],
                  [
                    43.364873,
                    12.629906
                  ],
                  [
                    43.469014,
                    12.507192
                  ],
                  [
                    43.691211,
                    12.418707
                  ],
                  [
                    43.71623,
                    12.408744
                  ],
                  [
                    44.142069,
                    12.239163
                  ],
                  [
                    44.567907,
                    12.069581
                  ],
                  [
                    44.993746,
                    11.9
                  ],
                  [
                    45.080711,
                    11.927235
                  ],
                  [
                    45.520055,
                    12.064824
                  ],
                  [
                    45.9594,
                    12.202414
                  ],
                  [
                    46.398745,
                    12.340004
                  ],
                  [
                    46.838089,
                    12.477593
                  ],
                  [
                    47.277434,
                    12.615183
                  ],
                  [
                    47.716778,
                    12.752772
                  ],
                  [
                    48.156123,
                    12.890362
                  ],
                  [
                    48.595468,
                    13.027952
                  ],
                  [
                    49.034812,
                    13.165541
                  ],
                  [
                    49.474157,
                    13.303131
                  ],
                  [
                    49.913501,
                    13.440721
                  ],
                  [
                    50.352846,
                    13.57831
                  ],
                  [
                    50.792191,
                    13.7159
                  ],
                  [
                    51.231535,
                    13.853489
                  ],
                  [
                    51.67088,
                    13.991079
                  ],
                  [
                    52.110225,
                    14.128669
                  ],
                  [
                    52.549569,
                    14.266258
                  ],
                  [
                    52.988914,
                    14.403848
                  ],
                  [
                    58.438634,
                    15.679702
                  ],
                  [
                    80.701832,
                    5.701832
                  ],
                  [
                    93.468048,
                    6.26668
                  ],
                  [
                    93.644801,
                    6.27979
                  ],
                  [
                    94.095453,
                    6.313216
                  ],
                  [
                    94.546105,
                    6.346642
                  ],
                  [
                    94.996757,
                    6.380069
                  ],
                  [
                    95.087901,
                    6.386743
                  ],
                  [
                    95.538651,
                    6.419749
                  ],
                  [
                    95.6777,
                    6.381267
                  ],
                  [
                    96.113066,
                    6.26078
                  ],
                  [
                    96.548433,
                    6.140293
                  ],
                  [
                    96.983799,
                    6.019807
                  ],
                  [
                    97.419165,
                    5.89932
                  ],
                  [
                    97.854532,
                    5.778833
                  ],
                  [
                    97.977656,
                    5.62999
                  ],
                  [
                    98.265553,
                    5.281954
                  ],
                  [
                    98.553451,
                    4.933918
                  ],
                  [
                    98.841348,
                    4.585882
                  ],
                  [
                    99.185654,
                    4.304885
                  ],
                  [
                    99.535149,
                    4.019653
                  ],
                  [
                    99.738417,
                    3.85376
                  ],
                  [
                    99.932689,
                    3.69521
                  ],
                  [
                    100.281985,
                    3.410141
                  ],
                  [
                    100.63128,
                    3.125072
                  ],
                  [
                    100.784531,
                    3
                  ],
                  [
                    101,
                    2.813011
                  ],
                  [
                    101.196657,
                    2.711314
                  ],
                  [
                    101.448781,
                    2.580933
                  ],
                  [
                    101.651348,
                    2.420594
                  ],
                  [
                    102.003384,
                    2.139419
                  ],
                  [
                    102.028193,
                    2.119605
                  ],
                  [
                    102.250359,
                    1.920972
                  ],
                  [
                    102.390329,
                    1.853969
                  ],
                  [
                    102.79612,
                    1.65972
                  ],
                  [
                    102.802769,
                    1.656537
                  ],
                  [
                    102.950924,
                    1.561332
                  ],
                  [
                    103.149876,
                    1.425921
                  ],
                  [
                    103.343872,
                    1.260979
                  ],
                  [
                    103.376343,
                    1.233371
                  ],
                  [
                    103.465236,
                    1.19105
                  ],
                  [
                    103.508891,
                    1.172935
                  ],
                  [
                    103.575394,
                    1.14584
                  ],
                  [
                    103.616935,
                    1.133238
                  ],
                  [
                    103.678364,
                    1.124421
                  ],
                  [
                    103.732268,
                    1.127876
                  ],
                  [
                    103.788245,
                    1.161041
                  ],
                  [
                    103.829739,
                    1.182472
                  ],
                  [
                    103.862881,
                    1.19766
                  ],
                  [
                    103.881411,
                    1.205894
                  ],
                  [
                    103.931297,
                    1.228061
                  ],
                  [
                    103.992803,
                    1.250861
                  ],
                  [
                    104.055691,
                    1.259842
                  ],
                  [
                    104.10683,
                    1.26537
                  ],
                  [
                    104.121072,
                    1.267352
                  ],
                  [
                    104.161425,
                    1.27297
                  ],
                  [
                    104.208418,
                    1.278497
                  ],
                  [
                    104.241756,
                    1.284231
                  ],
                  [
                    104.272688,
                    1.289551
                  ],
                  [
                    104.327282,
                    1.297842
                  ],
                  [
                    104.449603,
                    1.40631
                  ],
                  [
                    111.409098,
                    15.632567
                  ],
                  [
                    114.847317,
                    21.843013
                  ],
                  [
                    114.564634,
                    22.108685
                  ],
                  [
                    114.564634,
                    22.108685
                  ],
                  [
                    114.345105,
                    22.108455
                  ],
                  [
                    114.293797,
                    22.116353
                  ],
                  [
                    114.255917,
                    22.097479
                  ],
                  [
                    114.23698,
                    22.108634
                  ],
                  [
                    114.188995,
                    22.150978
                  ],
                  [
                    114.178076,
                    22.19474
                  ],
                  [
                    114.17321,
                    22.209685
                  ],
                  [
                    114.122497,
                    22.247827
                  ],
                  [
                    114.109088,
                    22.272647
                  ],
                  [
                    114.107984,
                    22.275422
                  ],
                  [
                    114.112771,
                    22.280338
                  ],
                  [
                    114.129994,
                    22.290548
                  ],
                  [
                    114.144707,
                    22.293898
                  ],
                  [
                    114.154919,
                    22.292612
                  ],
                  [
                    114.16776,
                    22.289478
                  ],
                  [
                    114.174141,
                    22.289769
                  ],
                  [
                    114.17616,
                    22.290712
                  ]
                ]
              },
              "details": {
                "eca_distance": [
                  [
                    0,
                    49,
                    {
                      "in_eca": true,
                      "name": "North Sea and Baltic",
                      "distance": 477.6794600431965,
                      "from": [
                        10.713426,
                        59.906092
                      ],
                      "to": [
                        4.1038,
                        62
                      ]
                    }
                  ],
                  [
                    49,
                    305,
                    {
                      "in_eca": false,
                      "name": "",
                      "distance": 10464.16700863931,
                      "from": [
                        4.1038,
                        62
                      ],
                      "to": [
                        114.847317,
                        21.843013
                      ]
                    }
                  ]
                ],
                "hra_distance": [
                  [
                    0,
                    214,
                    {
                      "in_hra": false,
                      "distance": 5631.218218142549,
                      "from": [
                        10.713426,
                        59.906092
                      ],
                      "to": [
                        43.189582,
                        13.344682
                      ]
                    }
                  ],
                  [
                    214,
                    243,
                    {
                      "in_hra": true,
                      "distance": 966.5078995680345,
                      "from": [
                        43.189582,
                        13.344682
                      ],
                      "to": [
                        58.438634,
                        15.679702
                      ]
                    }
                  ],
                  [
                    243,
                    324,
                    {
                      "in_hra": false,
                      "distance": 4402.236052915767,
                      "from": [
                        58.438634,
                        15.679702
                      ],
                      "to": [
                        114.17616,
                        22.290712
                      ]
                    }
                  ]
                ],
                "name": [
                  [
                    0,
                    97,
                    ""
                  ],
                  [
                    97,
                    180,
                    "Suez Canal"
                  ],
                  [
                    180,
                    327,
                    ""
                  ]
                ],
                "snapped_points": {
                  "coordinates": [
                    [
                      10.713426,
                      59.906092
                    ],
                    [
                      114.17616,
                      22.290712
                    ]
                  ]
                }
              }
            }
          ]
        }
      },
      "LineString": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "coordinates": {
            "type": "array",
            "description": "A list of coordinate pairs, `[lon,lat]`.\n",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      },
      "PortResponse": {
        "type": "object",
        "properties": {
          "portName": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "locationCode": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "key": {
            "type": "integer"
          }
        },
        "example": {
          "portName": "BERGEN",
          "countryCode": "NO",
          "countryName": "Norway",
          "locationCode": "BGO",
          "timezone": "Europe/Oslo",
          "latitude": 60.392039,
          "longitude": 5.306605,
          "key": 104146
        }
      },
      "RequestResponse": {
        "type": "object",
        "properties": {
          "max_request": {
            "type": "number"
          },
          "remaining": {
            "type": "number"
          },
          "plan_name": {
            "type": "string"
          }
        },
        "example": {
          "Professional - Route": {
            "max_request": 1500,
            "remaining": 1500,
            "plan_name": "Professional - Route"
          },
          "Professional - Port": {
            "max_request": 3000,
            "remaining": 2990,
            "plan_name": "Professional - Route"
          },
          "Request": {
            "max_request": 5000,
            "remaining": 4995,
            "plan_name": "Request"
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth:": []
    }
  ]
}